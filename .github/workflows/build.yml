name: build

on: [push, pull_request]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [ubuntu-18.04, ubuntu-20.04, windows-latest]
        os: [windows-latest]
        build_type: ['Release']
        staticcompile: [1, 0]

    steps:
    - uses: actions/checkout@v2
    
    - id: boost
      name: Build Boost
      # You may pin to the exact commit or the version.
      # uses: egor-tensin/build-boost@bfb61b9fccc827f0c502fc400f6f63cc74f2d79a
      uses: egor-tensin/build-boost@v1
      with:
        # Version to build
        version: 1.74.0
        # Space-separated list of libraries
        libraries: program_options
        # Target platform
        platform: auto
        # Configuration to build
        configuration: Release
        # Build static libraries
        static: ${{ matrix.staticcompile }}
        # Link to the static runtime
        static-runtime: ${{ matrix.staticcompile }}
        # Destination directory
        #directory: # optional
    
    - name: test
      run: |
          dir /b /a /s ${{ steps.boost.outputs.root }}
          dir ${{ steps.boost.outputs.librarydir }}
          dir ${{ steps.boost.outputs.root }}
    
    - name: Setup Python
      uses: actions/setup-python@v2.2.2
      # with:
         # Version range or exact version of a Python version to use, using SemVer's version range syntax.
         # python-version: # optional, default is 3.x
         # The target architecture (x86, x64) of the Python interpreter.
         # architecture: # optional
         # Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
         # token: # optional, default is ${{ github.token }}

    - name: Configure CMake static
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      #working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      if: matrix.staticcompile == 1
      run: |
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DSTATICCOMPILE=ON -D "BOOST_ROOT=${{ steps.boost.outputs.root }}" -D "BOOST_LIBRARYDIR=${{ steps.boost.outputs.librarydir }}"
      
          
    - name: Configure CMake dynamic
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      #working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      if: matrix.staticcompile == 0
      run: |
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DSTATICCOMPILE=OFF -D "BOOST_ROOT=${{ steps.boost.outputs.root }}" -D "BOOST_LIBRARYDIR=${{ steps.boost.outputs.librarydir }}"
      

    - name: Build
      #working-directory: ${{runner.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.build_type }}

    #- name: "Install CMS (unix)"
    #  if: ${{ !contains(matrix.os, 'windows') }}
    #  run: sudo cmake --install build --config ${{ matrix.build_type }}

    #- name: "Install Spix (win)"
    #  if: ${{ contains(matrix.os, 'windows') }}
    #  run: cmake --install build --config ${{ matrix.build_type }}
